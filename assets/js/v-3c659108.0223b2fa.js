"use strict";(self.webpackChunkblog_vuepress_next=self.webpackChunkblog_vuepress_next||[]).push([[7544],{846:(e,i,s)=>{s.r(i),s.d(i,{data:()=>n});const n={key:"v-3c659108",path:"/views/front-end/git-rebase.html",title:"Git如何修改前几次的Commit信息及补充提交",lang:"en-US",frontmatter:{title:"Git如何修改前几次的Commit信息及补充提交",categories:["Git"],tags:["Git"],keywords:"Git",description:"Git",cover:"https://cdn.jsdelivr.net/gh/LeeDebug/PicGo/img/20201111170432.png",date:"2021-11-28T22:14:48.000Z"},excerpt:"",headers:[],git:{createdTime:1638196944e3,updatedTime:1638196944e3,contributors:[{name:"qducc",email:"961150665@qq.com",commits:1}]}}},3485:(e,i,s)=>{s.r(i),s.d(i,{default:()=>c});const n=(0,s(6252).uE)('<blockquote><p>在日常的开发中，特别是在配合 <code>Gerrit</code> 代码评审时，经常会遇到需要修改上一次甚至前几次 <code>Commit</code> 信息的情况。下面就介绍一下操作过程（因为是中文系统，所以很多 <code>git</code> 提示信息也是中文，请见谅~）</p></blockquote><h1 id="修改最后一次" tabindex="-1"><a class="header-anchor" href="#修改最后一次" aria-hidden="true">#</a> 修改最后一次</h1><p>这种情况一般是最简单的。只要使用以下命令，即可重新编辑 <code>Commit Message</code> 信息，或者补充提交，随后 <code>wq</code> 保存文件即可</p><div class="language-git ext-git line-numbers-mode"><pre class="language-git"><code>git commit --amend\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h1 id="修改之前的某一次" tabindex="-1"><a class="header-anchor" href="#修改之前的某一次" aria-hidden="true">#</a> 修改之前的某一次</h1><p>假设，已经有四次 Commit 记录分别为：<code>First</code>、<code>Second</code>、<code>Third</code>、<code>Fourth</code>，分支状态如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/LeeDebug/PicGo/img/20211128231124.png" alt="最近4次提交"></p><p>想要修改 <code>Second</code> 的那一次，也就是倒数第 <code>3</code> 次，使用以下命令</p><div class="language-git ext-git line-numbers-mode"><pre class="language-git"><code>git rebase -i HEAD~4\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>此时，会打开一个 vim 编辑信息，前 4 行，即当前本地最新的 4 次注释，想要修改哪一次的信息，将行首的 <code>pick</code> 改为 <code>edit</code> 即可，然后 <code>wq</code> 保存文件即可，操作如下：</p><p><img src="https://cdn.jsdelivr.net/gh/LeeDebug/PicGo/img/20211128232659.png" alt="git rebase -i HEAD~4"></p><p>保存后，会提示您 <code>停止到 96b35b4... [Commit Desc]Second</code>，即回退成功。效果图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/LeeDebug/PicGo/img/20211128233158.png" alt="rebase to 96b35b4..."></p><p>现在你可以尽情的修改您的 <code>Commit Message</code> 或补充您要提交的代码</p><div class="language-git ext-git line-numbers-mode"><pre class="language-git"><code><span class="token comment"># 如果还有代码需要提交</span>\ngit add .\n\ngit commit --amend\n\ngit rebase --continue\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>之后，就像上图中提示所说，使用以下命令即可完成本次修改，并回到最新状态，操作如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/LeeDebug/PicGo/img/20211128234826.png" alt="修改之前的某一次提交"></p><p>修改后，我们再看一下目前的分支状态，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/LeeDebug/PicGo/img/20211128234744.png" alt="修改后的分支状态"></p><p>其实原理也很简单，个人理解应该就是先将版本回退至之前的某个版本，修改完 <code>Commit Message</code> 后，再前进到最新的分支版本吧~</p><h1 id="修改之前的某几次" tabindex="-1"><a class="header-anchor" href="#修改之前的某几次" aria-hidden="true">#</a> 修改之前的某几次</h1><p>跟修改之前的某一次提交的操作很相似，只是在第一步 <code>rebase</code> 之后，将所有要回退的版本的行首 <code>pick</code> 字段依次修改为 <code>edit</code> 字段，然后 <code>wq</code> 保存文件即可，操作如下：</p><p><img src="https://cdn.jsdelivr.net/gh/LeeDebug/PicGo/img/20211128235358.png" alt="修改之前的多次提交"></p><p>修改后，我们看一下最终的分支状态，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/LeeDebug/PicGo/img/20211128235450.png" alt="修改后的分支状态"></p><h1 id="如果已经将代码push到远程仓库" tabindex="-1"><a class="header-anchor" href="#如果已经将代码push到远程仓库" aria-hidden="true">#</a> 如果已经将代码push到远程仓库</h1><p>首先，你把最新的版本从远程仓库先pull下来，修改的方法都如上，最后修改完成后，强制push到远程仓库：</p><div class="language-git ext-git line-numbers-mode"><pre class="language-git"><code>git push --force origin master\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>注：很重要的一点是，你最好保证在你强制push之前没有人提交代码，如果在你push之前有人提交了新的代码到远程仓库，然后你又强制push，那么会被你的强制更新覆盖！！！</p><p>最后，可以检查一下远程的提交记录~~</p><h1 id="祝君无bug" tabindex="-1"><a class="header-anchor" href="#祝君无bug" aria-hidden="true">#</a> 祝君无Bug~</h1>',31),c={render:function(e,i){return n}}}}]);