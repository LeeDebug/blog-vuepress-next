"use strict";(self.webpackChunkblog_vuepress_next=self.webpackChunkblog_vuepress_next||[]).push([[3011],{9393:(l,e,i)=>{i.r(e),i.d(e,{data:()=>o});const o={key:"v-5a2dec5e",path:"/views/front-end/interview-2021.html",title:"2021前端知识点总结",lang:"en-US",frontmatter:{title:"2021前端知识点总结",categories:["interview"],tags:["interview"],keywords:"interview",description:"2021前端面试总结",cover:"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png",date:"2021-05-24T18:17:08.000Z"},excerpt:"",headers:[],git:{createdTime:1638196944e3,updatedTime:1638196944e3,contributors:[{name:"qducc",email:"961150665@qq.com",commits:1}]}}},6192:(l,e,i)=>{i.r(e),i.d(e,{default:()=>D});var o=i(6252);const t=(0,o.uE)('<h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h1><p>[TOC]</p><h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h1><ol><li><strong>啊</strong></li></ol><ul><li>啊</li></ul><ol><li><strong>啊</strong></li></ol><ul><li>啊</li></ul><h1 id="vue-2-x" tabindex="-1"><a class="header-anchor" href="#vue-2-x" aria-hidden="true">#</a> Vue 2.x</h1>',8),r={href:"https://www.bilibili.com/video/BV1rQ4y1o7WF/?spm_id_from=333.788.recommend_more_video.1",target:"_blank",rel:"noopener noreferrer"},c=(0,o.Uk)("BiliBili: Vue 2.x 源码解读(12) —— path阶段"),n=(0,o.uE)("<ul><li>Emm...，慢慢看</li></ul><ol><li><strong>v-if和v-for哪个优先级更高?如果两个同时出现，应该怎么优化得到更好的性能?</strong></li></ol><ul><li>源码: <code>compiler/codegen/index.js</code></li><li>在<code>Vue 2.x</code>版本中，<code>v-if</code>的优先级大于<code>v-for</code></li><li>在<code>Vue 3.x</code>版本中，<code>v-for</code>的优先级大于<code>v-if</code></li><li><code>render</code>函数: <code>with(this){return _c(&#39;div&#39;, { ... })}</code></li></ul><ol><li><strong>Vue组件data为什么必须是个函数而Vue的根实例则没有此限制?</strong></li></ol><ul><li>源码: <code>src\\core\\instance\\state.js - initData()</code></li><li>Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态变更将会影响所有组件实例，这是不合理的</li><li>采用函数形式定义，在initData时会将其作为工厂函数返回全新data对象，有效规避多实例之间状态污染问题</li><li>而在Vue根实例创建过程中则不存在该限制，也是因为根实例只能有一个，不需要担心这种情况</li></ul><ol><li><strong>你知道vue中key的作用和工作原理吗?说说你对它的理解。</strong></li></ol><ul><li>源码: <code>src\\core\\vdom\\patch.js - updateChildren()</code></li><li>key的作用主要是为了高效的更新虚拟DOM，其原理是vue在patch过程中通过key可以精准判断两 个节点是否是同一个，从而避免频繁更新不同元素，使得整个patch过程更加高效，减少DOM操 作量，提高性能</li><li><s>另外，若不设置key还可能在列表更新时引发一些隐蔽的bug（暂时未知）</s></li><li>vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果</li></ul><ol><li><strong>你怎么理解vue中的diff算法?</strong></li></ol><ul><li>源码1: 必要性，<code>lifecycle.js - mountComponent()</code><ul><li>组件中可能存在很多个data中的key使用</li></ul></li><li>源码2: 执行方式，<code>patch.js - patchVnode()</code><ul><li>patchVnode是diff发生的地方，整体策略: 深度优先，同层比较</li></ul></li><li>源码3: 高效性，<code>patch.js - updateChildren()</code></li><li>diff算法是虚拟DOM技术的必然产物: 通过新旧虚拟DOM作对比(即diff)，将变化的地方更新在真实DOM上</li><li>另外，也需要 diff 高效的执行对比过程，从而降低时间复杂度为O(n)</li><li>vue 2.x 中为了降低 Watcher 粒度，每个组件只有一个Watcher与之对应，只有引入diff才能精确找到发生变化的地方</li><li>vue中diff执行的时刻是组件实例执行其更新函数时，它会比对上一次渲染结果oldVnode和新的渲染结果newVnode，此过程称为patch</li><li>diff过程整体遵循<code>深度优先、同层比较</code>的策略;两个节点之间比较会根据它们是否拥有子节点或者文本节点做不同操作;比较两组子节点是算法的重点，首先假设头尾节点可能相同做<code>首首、尾尾、首尾、尾首</code>4次比对尝试，如果没有找到相同节点才按照通用方式遍历查找，查找结束再按情况处理剩下的节点;借助key通常可以非常精确找到相同节点，因此整个patch过程非常高效。</li></ul><ol><li><strong>谈一谈对vue组件化的理解?</strong></li></ol><ul><li>源码1: 组件定义，<code>src\\core\\global-api\\assets.js</code><ul><li>vue-loader会编译template为render函数，最终导出的依然是组件配置对象</li></ul></li><li>源码2: 组件化优点，<code>lifecycle.js - mountComponent()</code><ul><li>组件、Watcher、渲染函数和更新函数之间的关系</li></ul></li><li>源码3: 组件化实现: 构造函数，<code>src\\core\\global-api\\extend.js</code>、实例化及挂载，<code>src\\core\\vdom\\patch.js - createElm()</code></li><li>组件是独立和可复用的代码组织单元。组件系统是 Vue 核心特性之一，它使开发者使用小型、独立和通常可复用的组件构建大型应用;</li><li>组件化开发能大幅提高应用开发效率、测试性、复用性等;</li><li>组件使用按分类有: 页面组件、业务组件、通用组件;</li><li>vue的组件是基于配置的，我们通常编写的组件是组件配置而非组件，框架后续会生成其构造函数，它们基于VueComponent，扩展于Vue;</li><li>vue中常见组件化技术有: 属性prop，自定义事件，插槽等，它们主要用于组件通信、扩展等;</li><li>合理的划分组件，有助于提升应用性能;</li><li>组件应该是高内聚、低耦合的;</li><li>遵循单向数据流的原则。</li></ul><ol><li><strong>谈一谈对vue设计原则的理解?</strong></li></ol><ul><li>在vue的官网上写着大大的定义和特点: <code>渐进式JavaScript框架、易用、灵活和高效</code></li></ul><ol><li><strong>谈谈你对MVC、MVP和MVVM的理解?</strong></li></ol><ul><li>源码: <code>compiler</code></li></ul><ol><li><strong>你了解哪些Vue性能优化方法?</strong></li></ol>",16),u=(0,o._)("li",null,"路由懒加载",-1),d=(0,o._)("li",null,"keep-alive缓存页面",-1),a=(0,o._)("li",null,"使用v-show复用DOM",-1),s=(0,o._)("li",null,"v-for 遍历避免同时使用 v-if",-1),h=(0,o._)("li",null,[(0,o.Uk)("长列表性能优化，静态列表："),(0,o._)("code",null,"list = Object.freeze([])")],-1),p=(0,o.Uk)("虚拟滚动："),g={href:"https://github.com/x-extends/vxe-table",target:"_blank",rel:"noopener noreferrer"},v=(0,o.Uk)("vxe-table"),m=(0,o.uE)("<li>事件的销毁，Vue 组件销毁时，会自动解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。<code>beforeDestroy() { clearInterval(this.timer) }</code></li><li>图片懒加载，对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域 内的图片先不做加载，等到滚动到可视区域后再去加载。参考项目：<code>vue-lazyload</code>，代码：<code>&lt;img v-lazy=&quot;/static/img/1.png&quot;&gt;</code></li><li>第三方插件按需引入，<code>import { Button, Select } from &#39;element-ui&#39;;</code></li><li>无状态的组件标记为函数式组件，<code>&lt;template functional&gt; ... &lt;/template&gt;</code></li><li>子组件分割，独立可复用功能可抽象出来</li><li>变量本地化，如果有for循环等频繁访问<code>this.xxx</code>的情况，提前赋值给本地变量</li><li>SSR</li>",7),f=(0,o._)("ol",{start:"2"},[(0,o._)("li",null,[(0,o._)("strong",null,"简单说一说vuex使用及其理解?")])],-1),_=(0,o._)("ul",null,[(0,o._)("li",null,"Vuex实现了一个单向数据流，在全局拥有一个state存放数据，当组件要更改state中的数据时，必须通过mutation提交修改信息，mutation同时提供了订阅者模式供外部插件调用获取state数据的更新。而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作 需要走action，但action也是无法直接修改state的，还是需要通过mutation来修改state的数据。最后，根据state的变化，渲染到视图上。")],-1),b=(0,o._)("ol",{start:"3"},[(0,o._)("li",null,[(0,o._)("strong",null,"vue中组件之间的通信方式?")])],-1),x=(0,o._)("li",null,[(0,o._)("code",null,"props ★★"),(0,o._)("ul",null,[(0,o._)("li",null,"父组件 A 通过 props 向子组件 B 传递值， B 组件传递 A 组件通过 $emit A 组件通过 v-on/@ 触发"),(0,o._)("li",null,"子组件通过 events 给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。")])],-1),k=(0,o._)("code",null,"$emit/$on 事件总线 ★★",-1),V={href:"https://leedebug.github.io/2020/11/07/%E4%B8%AD%E5%A4%AE%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF%E6%8F%92%E4%BB%B6vue-bus-ts/",target:"_blank",rel:"noopener noreferrer"},B=(0,o.Uk)("vue-bus-ts"),y=(0,o.uE)("<li><code>vuex ★★★</code><ul><li>结合<code>localStorage</code>保存登录信息及权限列表等</li></ul></li><li><code>$parent/$children</code></li><li><code>$attrs/$listeners</code><ul><li>多级组件嵌套需要传递数据时，通常使用的方法是通过vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此Vue2.4 版本提供了另一种方法。</li><li><code>$attrs</code>:包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个 组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=&quot;$attrs&quot; 传入内部组件。通常配合 interitAttrs 选项一起使用。</li><li><code>$listeners</code>: 包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v- on=&quot;$listeners&quot; 传入内部组件</li></ul></li><li><code>provide/inject ★★★</code><ul><li>优点:使用简单 缺点:不是响应式</li><li>父级：<code>provide: { name: &#39;王者峡谷&#39; //这种绑定是不可响应的 }</code>（<code>name: this</code>会有响应式，把当前组件实例传递下去，但子组件会绑定一些多余的属性，比如props、methonds等）</li><li>子级：<code>inject: [&#39;name&#39;] }</code></li></ul></li>",4),w=(0,o.uE)('<ol start="4"><li><strong>vue-router 中的导航钩子由那些?</strong></li></ol><ul><li>源码: <code>compiler</code></li></ul><ol start="5"><li><strong>什么是递归组件?</strong></li></ol><ul><li>源码: <code>compiler</code></li></ul><ol start="6"><li><strong>说一说vue响应式理解?</strong></li></ol><ul><li>源码: <code>compiler</code></li></ul><ol start="7"><li><strong>vue如果想要扩展某个组件现有组件时怎么做?</strong></li></ol><ul><li>源码: <code>compiler</code></li></ul><ol start="8"><li><strong>vue为什么要求组件模版只能有一个根元素?</strong></li></ol><ul><li>源码: <code>compiler</code></li></ul><ol start="9"><li><strong>watch和computed的区别以及怎么选用?</strong></li></ol><ul><li>源码: <code>compiler</code></li></ul><ol start="10"><li><strong>你知道nextTick的原理吗?</strong></li></ol><ul><li>源码: <code>compiler</code></li></ul><ol start="11"><li><strong>你知道vue双向数据绑定的原理吗?</strong></li></ol><ul><li>源码: <code>compiler</code></li></ul><ol start="12"><li><strong>简单说一说vue生命周期的理解?</strong></li></ol><ul><li>源码: <code>compiler</code></li></ul><h1 id="vue-3-x" tabindex="-1"><a class="header-anchor" href="#vue-3-x" aria-hidden="true">#</a> Vue 3.x</h1>',19),E={href:"https://blog.csdn.net/sky_cmc/article/details/104988921",target:"_blank",rel:"noopener noreferrer"},j=(0,o.Uk)("vue3.x的新特性研究"),C=(0,o.uE)('<ul><li>Emm...，慢慢看</li></ul><h1 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> Webpack</h1><ol><li><strong>啊</strong></li></ol><ul><li>啊</li></ul><h1 id="css-css3" tabindex="-1"><a class="header-anchor" href="#css-css3" aria-hidden="true">#</a> Css &amp; Css3</h1><ol><li><strong>啊</strong></li></ol><ul><li>啊</li></ul><h1 id="项目结构化" tabindex="-1"><a class="header-anchor" href="#项目结构化" aria-hidden="true">#</a> 项目结构化？</h1><ol><li><strong>啊</strong></li></ol><ul><li>啊</li></ul><h1 id="祝君无bug" tabindex="-1"><a class="header-anchor" href="#祝君无bug" aria-hidden="true">#</a> 祝君无Bug~</h1>',11),D={render:function(l,e){const i=(0,o.up)("OutboundLink");return(0,o.wg)(),(0,o.iD)(o.HY,null,[t,(0,o._)("ol",null,[(0,o._)("li",null,[(0,o._)("strong",null,[(0,o._)("a",r,[c,(0,o.Wm)(i)])])])]),n,(0,o._)("ul",null,[u,d,a,s,h,(0,o._)("li",null,[p,(0,o._)("a",g,[v,(0,o.Wm)(i)])]),m]),f,_,b,(0,o._)("ul",null,[x,(0,o._)("li",null,[k,(0,o._)("ul",null,[(0,o._)("li",null,[(0,o._)("a",V,[B,(0,o.Wm)(i)])])])]),y]),w,(0,o._)("ol",null,[(0,o._)("li",null,[(0,o._)("strong",null,[(0,o._)("a",E,[j,(0,o.Wm)(i)])])])]),C],64)}}}}]);