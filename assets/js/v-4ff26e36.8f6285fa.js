"use strict";(self.webpackChunkblog_vuepress_next=self.webpackChunkblog_vuepress_next||[]).push([[4462],{5869:(a,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t={key:"v-4ff26e36",path:"/views/front-end/realize-the-input-box.html",title:"实现输入框的n种形式",lang:"en-US",frontmatter:{title:"实现输入框的n种形式",categories:["Vue"],tags:["Vue"],keywords:"Vue",description:"实现输入框的n种形式",cover:"https://cdn.jsdelivr.net/gh/LeeDebug/PicGo/img/20210226125630.png",date:"2021-02-10T22:19:34.000Z"},excerpt:"",headers:[],git:{createdTime:163785445e4,updatedTime:163785445e4,contributors:[{name:"licc",email:"961150665@qq.com",commits:1}]}}},8876:(a,n,s)=>{s.r(n),s.d(n,{default:()=>p});const t=(0,s(6252).uE)('<blockquote><p>开发过程中遇到的新方案</p></blockquote><h1 id="textarea" tabindex="-1"><a class="header-anchor" href="#textarea" aria-hidden="true">#</a> textarea</h1><p>最常见的就是这种形式，不多赘述。代码如下</p><p>但要展示带html元素的内容，可能就不是那么方便了</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>\n  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sendMsgBox<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sendMsgBox<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sendMsgBox<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">row</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sendContent<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">:readonly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cantOperate<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getPlaceholder<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleBlurFun<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">@focus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleFocusFun<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">@keydown</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleKeyDown($event)<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ <span class="token punctuation">&#39;</span>height<span class="token punctuation">&#39;</span>: textareHeight }<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h1 id="pre标签" tabindex="-1"><a class="header-anchor" href="#pre标签" aria-hidden="true">#</a> pre标签</h1><p><code>contenteditable</code>属性会将该段落变为可编辑状态，如同直接用vue的<code>v-html</code>展示。代码如下</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span> <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  可以直接在这里输入.....\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h1 id="祝君无bug" tabindex="-1"><a class="header-anchor" href="#祝君无bug" aria-hidden="true">#</a> 祝君无Bug~</h1>',9),e={},p=(0,s(3744).Z)(e,[["render",function(a,n){return t}]])}}]);